// @generated by protobuf-ts 2.9.0 with parameter long_type_string,add_pb_suffix,force_server_none
// @generated from protobuf file "oyasumi-core.proto" (package "OyasumiCore", syntax proto3)
// tslint:disable
import { ServiceType } from '@protobuf-ts/runtime-rpc';
import type { BinaryWriteOptions } from '@protobuf-ts/runtime';
import type { IBinaryWriter } from '@protobuf-ts/runtime';
import { WireType } from '@protobuf-ts/runtime';
import type { BinaryReadOptions } from '@protobuf-ts/runtime';
import type { IBinaryReader } from '@protobuf-ts/runtime';
import { UnknownFieldHandler } from '@protobuf-ts/runtime';
import type { PartialMessage } from '@protobuf-ts/runtime';
import { reflectionMergePartial } from '@protobuf-ts/runtime';
import { MESSAGE_TYPE } from '@protobuf-ts/runtime';
import { MessageType } from '@protobuf-ts/runtime';
/**
 * @generated from protobuf message OyasumiCore.OverlaySidecarStartArgs
 */
export interface OverlaySidecarStartArgs {
  /**
   * @generated from protobuf field: uint32 pid = 1;
   */
  pid: number;
  /**
   * @generated from protobuf field: uint32 grpc_port = 2;
   */
  grpcPort: number;
  /**
   * @generated from protobuf field: uint32 grpc_web_port = 3;
   */
  grpcWebPort: number;
}
/**
 * @generated from protobuf message OyasumiCore.ElevatedSidecarStartArgs
 */
export interface ElevatedSidecarStartArgs {
  /**
   * @generated from protobuf field: uint32 pid = 1;
   */
  pid: number;
  /**
   * @generated from protobuf field: uint32 grpc_port = 2;
   */
  grpcPort: number;
  /**
   * @generated from protobuf field: uint32 grpc_web_port = 3;
   */
  grpcWebPort: number;
  /**
   * Set to the pid of the previous process in case the sidecar relaunched itself
   *
   * @generated from protobuf field: optional uint32 old_pid = 4;
   */
  oldPid?: number;
}
/**
 * @generated from protobuf message OyasumiCore.Empty
 */
export interface Empty {}
// @generated message type with reflection information, may provide speed optimized methods
class OverlaySidecarStartArgs$Type extends MessageType<OverlaySidecarStartArgs> {
  constructor() {
    super('OyasumiCore.OverlaySidecarStartArgs', [
      { no: 1, name: 'pid', kind: 'scalar', T: 13 /*ScalarType.UINT32*/ },
      { no: 2, name: 'grpc_port', kind: 'scalar', T: 13 /*ScalarType.UINT32*/ },
      { no: 3, name: 'grpc_web_port', kind: 'scalar', T: 13 /*ScalarType.UINT32*/ },
    ]);
  }
  create(value?: PartialMessage<OverlaySidecarStartArgs>): OverlaySidecarStartArgs {
    const message = { pid: 0, grpcPort: 0, grpcWebPort: 0 };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
    if (value !== undefined) reflectionMergePartial<OverlaySidecarStartArgs>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: OverlaySidecarStartArgs
  ): OverlaySidecarStartArgs {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* uint32 pid */ 1:
          message.pid = reader.uint32();
          break;
        case /* uint32 grpc_port */ 2:
          message.grpcPort = reader.uint32();
          break;
        case /* uint32 grpc_web_port */ 3:
          message.grpcWebPort = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: OverlaySidecarStartArgs,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* uint32 pid = 1; */
    if (message.pid !== 0) writer.tag(1, WireType.Varint).uint32(message.pid);
    /* uint32 grpc_port = 2; */
    if (message.grpcPort !== 0) writer.tag(2, WireType.Varint).uint32(message.grpcPort);
    /* uint32 grpc_web_port = 3; */
    if (message.grpcWebPort !== 0) writer.tag(3, WireType.Varint).uint32(message.grpcWebPort);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message OyasumiCore.OverlaySidecarStartArgs
 */
export const OverlaySidecarStartArgs = new OverlaySidecarStartArgs$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ElevatedSidecarStartArgs$Type extends MessageType<ElevatedSidecarStartArgs> {
  constructor() {
    super('OyasumiCore.ElevatedSidecarStartArgs', [
      { no: 1, name: 'pid', kind: 'scalar', T: 13 /*ScalarType.UINT32*/ },
      { no: 2, name: 'grpc_port', kind: 'scalar', T: 13 /*ScalarType.UINT32*/ },
      { no: 3, name: 'grpc_web_port', kind: 'scalar', T: 13 /*ScalarType.UINT32*/ },
      { no: 4, name: 'old_pid', kind: 'scalar', opt: true, T: 13 /*ScalarType.UINT32*/ },
    ]);
  }
  create(value?: PartialMessage<ElevatedSidecarStartArgs>): ElevatedSidecarStartArgs {
    const message = { pid: 0, grpcPort: 0, grpcWebPort: 0 };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
    if (value !== undefined) reflectionMergePartial<ElevatedSidecarStartArgs>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ElevatedSidecarStartArgs
  ): ElevatedSidecarStartArgs {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* uint32 pid */ 1:
          message.pid = reader.uint32();
          break;
        case /* uint32 grpc_port */ 2:
          message.grpcPort = reader.uint32();
          break;
        case /* uint32 grpc_web_port */ 3:
          message.grpcWebPort = reader.uint32();
          break;
        case /* optional uint32 old_pid */ 4:
          message.oldPid = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: ElevatedSidecarStartArgs,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* uint32 pid = 1; */
    if (message.pid !== 0) writer.tag(1, WireType.Varint).uint32(message.pid);
    /* uint32 grpc_port = 2; */
    if (message.grpcPort !== 0) writer.tag(2, WireType.Varint).uint32(message.grpcPort);
    /* uint32 grpc_web_port = 3; */
    if (message.grpcWebPort !== 0) writer.tag(3, WireType.Varint).uint32(message.grpcWebPort);
    /* optional uint32 old_pid = 4; */
    if (message.oldPid !== undefined) writer.tag(4, WireType.Varint).uint32(message.oldPid);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message OyasumiCore.ElevatedSidecarStartArgs
 */
export const ElevatedSidecarStartArgs = new ElevatedSidecarStartArgs$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Empty$Type extends MessageType<Empty> {
  constructor() {
    super('OyasumiCore.Empty', []);
  }
  create(value?: PartialMessage<Empty>): Empty {
    const message = {};
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
    if (value !== undefined) reflectionMergePartial<Empty>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: Empty
  ): Empty {
    return target ?? this.create();
  }
  internalBinaryWrite(
    message: Empty,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message OyasumiCore.Empty
 */
export const Empty = new Empty$Type();
/**
 * @generated ServiceType for protobuf service OyasumiCore.OyasumiCore
 */
export const OyasumiCore = new ServiceType('OyasumiCore.OyasumiCore', [
  { name: 'OnOverlaySidecarStart', options: {}, I: OverlaySidecarStartArgs, O: Empty },
  { name: 'OnElevatedSidecarStart', options: {}, I: ElevatedSidecarStartArgs, O: Empty },
]);
