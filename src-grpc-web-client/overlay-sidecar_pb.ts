// @generated by protobuf-ts 2.9.0 with parameter long_type_string,add_pb_suffix,force_server_none
// @generated from protobuf file "overlay-sidecar.proto" (package "OyasumiOverlaySidecar", syntax proto3)
// tslint:disable
import { ServiceType } from '@protobuf-ts/runtime-rpc';
import type { BinaryWriteOptions } from '@protobuf-ts/runtime';
import type { IBinaryWriter } from '@protobuf-ts/runtime';
import { WireType } from '@protobuf-ts/runtime';
import type { BinaryReadOptions } from '@protobuf-ts/runtime';
import type { IBinaryReader } from '@protobuf-ts/runtime';
import { UnknownFieldHandler } from '@protobuf-ts/runtime';
import type { PartialMessage } from '@protobuf-ts/runtime';
import { reflectionMergePartial } from '@protobuf-ts/runtime';
import { MESSAGE_TYPE } from '@protobuf-ts/runtime';
import { MessageType } from '@protobuf-ts/runtime';
/**
 * Requests & Responses
 *
 * @generated from protobuf message OyasumiOverlaySidecar.PingResponse
 */
export interface PingResponse {
  /**
   * @generated from protobuf field: uint32 pid = 1;
   */
  pid: number;
}
/**
 * @generated from protobuf message OyasumiOverlaySidecar.AddNotificationRequest
 */
export interface AddNotificationRequest {
  /**
   * @generated from protobuf field: string message = 1;
   */
  message: string;
  /**
   * @generated from protobuf field: uint32 duration = 2;
   */
  duration: number;
}
/**
 * @generated from protobuf message OyasumiOverlaySidecar.AddNotificationResponse
 */
export interface AddNotificationResponse {
  /**
   * @generated from protobuf field: optional string notification_id = 1;
   */
  notificationId?: string;
}
/**
 * @generated from protobuf message OyasumiOverlaySidecar.ClearNotificationRequest
 */
export interface ClearNotificationRequest {
  /**
   * @generated from protobuf field: string notification_id = 1;
   */
  notificationId: string;
}
/**
 * @generated from protobuf message OyasumiOverlaySidecar.Empty
 */
export interface Empty {}
/**
 * @generated from protobuf message OyasumiOverlaySidecar.OyasumiSidecarState
 */
export interface OyasumiSidecarState {
  /**
   * @generated from protobuf field: optional bool sleep_mode = 1;
   */
  sleepMode?: boolean;
  /**
   * @generated from protobuf field: optional OyasumiOverlaySidecar.VRCStatus vrc_status = 2;
   */
  vrcStatus?: VRCStatus;
  /**
   * @generated from protobuf field: optional string vrc_username = 3;
   */
  vrcUsername?: string;
}
/**
 * @generated from protobuf enum OyasumiOverlaySidecar.VRCStatus
 */
export enum VRCStatus {
  /**
   * @generated from protobuf enum value: VRCStatus_Offline = 0;
   */
  VRCStatus_Offline = 0,
  /**
   * @generated from protobuf enum value: VRCStatus_Busy = 1;
   */
  VRCStatus_Busy = 1,
  /**
   * @generated from protobuf enum value: VRCStatus_AskMe = 2;
   */
  VRCStatus_AskMe = 2,
  /**
   * @generated from protobuf enum value: VRCStatus_Active = 3;
   */
  VRCStatus_Active = 3,
  /**
   * @generated from protobuf enum value: VRCStatus_JoinMe = 4;
   */
  VRCStatus_JoinMe = 4,
}
// @generated message type with reflection information, may provide speed optimized methods
class PingResponse$Type extends MessageType<PingResponse> {
  constructor() {
    super('OyasumiOverlaySidecar.PingResponse', [
      { no: 1, name: 'pid', kind: 'scalar', T: 13 /*ScalarType.UINT32*/ },
    ]);
  }
  create(value?: PartialMessage<PingResponse>): PingResponse {
    const message = { pid: 0 };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
    if (value !== undefined) reflectionMergePartial<PingResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: PingResponse
  ): PingResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* uint32 pid */ 1:
          message.pid = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: PingResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* uint32 pid = 1; */
    if (message.pid !== 0) writer.tag(1, WireType.Varint).uint32(message.pid);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message OyasumiOverlaySidecar.PingResponse
 */
export const PingResponse = new PingResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddNotificationRequest$Type extends MessageType<AddNotificationRequest> {
  constructor() {
    super('OyasumiOverlaySidecar.AddNotificationRequest', [
      { no: 1, name: 'message', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: 'duration', kind: 'scalar', T: 13 /*ScalarType.UINT32*/ },
    ]);
  }
  create(value?: PartialMessage<AddNotificationRequest>): AddNotificationRequest {
    const message = { message: '', duration: 0 };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
    if (value !== undefined) reflectionMergePartial<AddNotificationRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: AddNotificationRequest
  ): AddNotificationRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string message */ 1:
          message.message = reader.string();
          break;
        case /* uint32 duration */ 2:
          message.duration = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: AddNotificationRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* string message = 1; */
    if (message.message !== '') writer.tag(1, WireType.LengthDelimited).string(message.message);
    /* uint32 duration = 2; */
    if (message.duration !== 0) writer.tag(2, WireType.Varint).uint32(message.duration);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message OyasumiOverlaySidecar.AddNotificationRequest
 */
export const AddNotificationRequest = new AddNotificationRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddNotificationResponse$Type extends MessageType<AddNotificationResponse> {
  constructor() {
    super('OyasumiOverlaySidecar.AddNotificationResponse', [
      { no: 1, name: 'notification_id', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },
    ]);
  }
  create(value?: PartialMessage<AddNotificationResponse>): AddNotificationResponse {
    const message = {};
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
    if (value !== undefined) reflectionMergePartial<AddNotificationResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: AddNotificationResponse
  ): AddNotificationResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional string notification_id */ 1:
          message.notificationId = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: AddNotificationResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* optional string notification_id = 1; */
    if (message.notificationId !== undefined)
      writer.tag(1, WireType.LengthDelimited).string(message.notificationId);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message OyasumiOverlaySidecar.AddNotificationResponse
 */
export const AddNotificationResponse = new AddNotificationResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClearNotificationRequest$Type extends MessageType<ClearNotificationRequest> {
  constructor() {
    super('OyasumiOverlaySidecar.ClearNotificationRequest', [
      { no: 1, name: 'notification_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
    ]);
  }
  create(value?: PartialMessage<ClearNotificationRequest>): ClearNotificationRequest {
    const message = { notificationId: '' };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
    if (value !== undefined) reflectionMergePartial<ClearNotificationRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ClearNotificationRequest
  ): ClearNotificationRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string notification_id */ 1:
          message.notificationId = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: ClearNotificationRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* string notification_id = 1; */
    if (message.notificationId !== '')
      writer.tag(1, WireType.LengthDelimited).string(message.notificationId);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message OyasumiOverlaySidecar.ClearNotificationRequest
 */
export const ClearNotificationRequest = new ClearNotificationRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Empty$Type extends MessageType<Empty> {
  constructor() {
    super('OyasumiOverlaySidecar.Empty', []);
  }
  create(value?: PartialMessage<Empty>): Empty {
    const message = {};
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
    if (value !== undefined) reflectionMergePartial<Empty>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: Empty
  ): Empty {
    return target ?? this.create();
  }
  internalBinaryWrite(
    message: Empty,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message OyasumiOverlaySidecar.Empty
 */
export const Empty = new Empty$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OyasumiSidecarState$Type extends MessageType<OyasumiSidecarState> {
  constructor() {
    super('OyasumiOverlaySidecar.OyasumiSidecarState', [
      { no: 1, name: 'sleep_mode', kind: 'scalar', opt: true, T: 8 /*ScalarType.BOOL*/ },
      {
        no: 2,
        name: 'vrc_status',
        kind: 'enum',
        opt: true,
        T: () => ['OyasumiOverlaySidecar.VRCStatus', VRCStatus],
      },
      { no: 3, name: 'vrc_username', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },
    ]);
  }
  create(value?: PartialMessage<OyasumiSidecarState>): OyasumiSidecarState {
    const message = {};
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
    if (value !== undefined) reflectionMergePartial<OyasumiSidecarState>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: OyasumiSidecarState
  ): OyasumiSidecarState {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional bool sleep_mode */ 1:
          message.sleepMode = reader.bool();
          break;
        case /* optional OyasumiOverlaySidecar.VRCStatus vrc_status */ 2:
          message.vrcStatus = reader.int32();
          break;
        case /* optional string vrc_username */ 3:
          message.vrcUsername = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: OyasumiSidecarState,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* optional bool sleep_mode = 1; */
    if (message.sleepMode !== undefined) writer.tag(1, WireType.Varint).bool(message.sleepMode);
    /* optional OyasumiOverlaySidecar.VRCStatus vrc_status = 2; */
    if (message.vrcStatus !== undefined) writer.tag(2, WireType.Varint).int32(message.vrcStatus);
    /* optional string vrc_username = 3; */
    if (message.vrcUsername !== undefined)
      writer.tag(3, WireType.LengthDelimited).string(message.vrcUsername);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message OyasumiOverlaySidecar.OyasumiSidecarState
 */
export const OyasumiSidecarState = new OyasumiSidecarState$Type();
/**
 * @generated ServiceType for protobuf service OyasumiOverlaySidecar.OyasumiOverlaySidecar
 */
export const OyasumiOverlaySidecar = new ServiceType(
  'OyasumiOverlaySidecar.OyasumiOverlaySidecar',
  [
    { name: 'Ping', options: {}, I: Empty, O: PingResponse },
    { name: 'RequestStop', options: {}, I: Empty, O: Empty },
    { name: 'AddNotification', options: {}, I: AddNotificationRequest, O: AddNotificationResponse },
    { name: 'ClearNotification', options: {}, I: ClearNotificationRequest, O: Empty },
    { name: 'SyncState', options: {}, I: OyasumiSidecarState, O: Empty },
  ]
);
